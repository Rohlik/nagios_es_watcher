#!/bin/bash
#
#   Nagios Check for Conditions met in Elasticsearch index
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Upraveno: Rohlik
# Verze: 20180115.1

PROGNAME=`basename $0`
VERSION="0.3"
AUTHOR="Nobody @ QXIP BV, modified by Rohlik"

ST_OK=0
ST_WR=1
ST_CR=2
ST_UK=3

re='^[0-9]+$'
epoch=`date +%s`
hostname="localhost"
port=9200
status_page="nonpci-$(date +"%Y.%m.*")/_count"
query='{"query":{"bool":{"must":[{"match_phrase":{"message":{"query":"*"}}},{"range":{"@timestamp":{"gt":"now-5m"}}}]}}}'
query_string="*"
timefield="@timestamp"
timerange="5m"
c_threshold="5"
w_threshold="0"

build_query() {
    query='{"query":{"bool":{"must":[{"match_phrase":{"message":{"query":"*"}}},{"range":{"@timestamp":{"gt":"now-5m"}}}]}}}'
    query="${query/5m/$timerange}"
    query="${query/@timestamp/$timefield}"
    query="${query/\*/$query_string}"
}

verify() {
if ! [[ "$c_threshold" =~ $re ]] || ! [[ "$w_threshold" =~ $re ]]; then
        echo "Parameters for warning and critical threshold must be integer (whole numbers)!"
        exit 3
fi
}

print_version() {
    echo "$VERSION $AUTHOR"
}

print_help() {
    print_version $PROGNAME $VERSION
    echo ""
    echo "$PROGNAME is a Nagios plugin to check the Elasticsearch index for specific string."
    echo ""
    echo "$PROGNAME -H localhost -P 9200"
    echo ""
    echo "Options:"
    echo "  -H/--hostname"
    echo "     Defines the hostname. Default is: localhost"
    echo "  -P/--port"
    echo "     Defines the port. Default is: 9200"
    echo "  -A/--auth"
    echo "     Defines the HTTP authentication. Default is: none"
    echo "  -L/--last"
    echo "     Specifies the timerange to search (default: 5m )"
    echo "  -p/--path"
    echo "     Specifies the query path (default: nonpci-*/_count )"
    echo "  -T/--ts"
    echo "     Specifies the timefield for filters (default: @timestamp )"
    echo "  -Q/--query"
    echo "     Specifies the query string to use (default: * )"
    echo "  -W/-w"
    echo "     Specifies the warning threshold for query count (default: >0 )"
    echo "  -C/-c"
    echo "     Specifies the critical threshold for query count (default: =>5 )"
    echo " "
    exit $ST_UK
}

while test -n "$1"; do
    case "$1" in
        -help|-h)
            print_help
            exit $ST_UK
            ;;
        --version|-v)
            print_version $PROGNAME $VERSION
            exit $ST_UK
            ;;
        --hostname|-H)
            hostname=$2
            shift
            ;;
        --path|-p)
            status_page=$2
            shift
            ;;
        --port|-P)
            port=$2
            shift
            ;;
        --auth|-A)
            http_auth=$2
            shift
            ;;
        --last|-L)
            timerange=$2
            shift
            ;;
        --ts|-T)
            timefield=$2
            shift
            ;;
        --query|-Q)
            query_string=$2
            shift
            ;;
        -W|-w)
            w_threshold="$2"
            shift
            ;;
        -C|-c)
            c_threshold="$2"
            shift
            ;;
        *)
        echo "Unknown argument: $1"
        print_help
        exit $ST_UK
        ;;
    esac
    shift
    build_query
    verify
done

get_status() {

    command="curl -XGET -q -s $hostname:$port/$status_page -d '$query'"
    if [ -n "$http_auth" ]; then
              command="$command -u $http_auth"
    fi

    count=$( eval $command | egrep -o '"count":[0-9]+' | cut -d ":" -f2 )

    # Determine the Nagios Status and Exit Code
    if [ "$count" -ge "$c_threshold" ]; then
        NAGSTATUS="CRITICAL"
        EXST=$ST_CR
    elif [ "$count" -gt "$w_threshold" ]; then
        NAGSTATUS="WARNING"
        EXST=$ST_WR
    elif [ "$count" -eq 0 ]; then
        NAGSTATUS="OK"
        EXST=$ST_OK
    else
        NAGSTATUS="UNKNOWN"
        EXST=$ST_UK
    fi
}

do_output() {
get_status
output="Pocet vyskytu stringu \"$query_string\" je: $count"
}


# Here we go!
which curl >/dev/null 2>&1
if [ "$?" != "0" ]; then
    echo "CRITICAL - curl is not installed"
    exit $ST_CR
fi
which egrep >/dev/null 2>&1
if [ "$?" != "0" ]; then
    echo "CRITICAL - egrep is not installed"
    exit $ST_CR
fi

do_output

COMPARE=$listql

echo "${NAGSTATUS} - ${output}"
exit $EXST
